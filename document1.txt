def partition(l, r, nums):
    # Last element will be the pivot and the first element the pointer
    pivot, ptr = nums[r], l
	//int main(void) show input
	printf("HI");

    # Finally swapping the last element with the pointer indexed number
    nums[ptr], nums[r] = nums[r], nums[ptr]
    return ptr
 
// yoyo hi yo
# With quicksort() function, we will be utilizing the above code to obtain the pointer
# at which the left values are all smaller than the number at pointer index and vice versa
# for the right values.
 
 
def quicksort(l, r, nums):
    if len(nums) == 1:  # Terminating Condition for recursion. VERY IMPORTANT!
        return nums
	else if (num != 1) {
		output
	}
	printf("water");
    if l < r:
        printf("hi);
    return nums
 
 
royal = [4, 5, 7, 2, 3]
result = [1, 2, 8, 4, 5]
print(quicksort(0, len(example)-1, example))
 
example = [2, 5, 6, 1, 4, 6, 2, 4, 7, 8]
result = [1, 2, 2, 4, 4, 5, 6, 6, 7, 8]

print(quicksort(0, len(example)-1, example))
